:py:mod:`dvcurator.github_projectv2`
====================================

.. py:module:: dvcurator.github_projectv2


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   dvcurator.github_projectv2.gql_query
   dvcurator.github_projectv2.get_org_id
   dvcurator.github_projectv2.get_team_id
   dvcurator.github_projectv2.get_repo
   dvcurator.github_projectv2.alter_column
   dvcurator.github_projectv2.draft_issue
   dvcurator.github_projectv2.new_projectv2
   dvcurator.github_projectv2.generate_templatev2
   dvcurator.github_projectv2.add_issue



Attributes
~~~~~~~~~~

.. autoapisummary::

   dvcurator.github_projectv2.github_api


.. py:data:: github_api
   :annotation: = https://api.github.com

   

.. py:function:: gql_query(query, token, params=None)

   Run a gql API query on Github

   :param query: The gql query
   :type query: string
   :param token: Github API token
   :type token: string
   :param params: Parameters to pass to the gql query
   :type params: dict
   :return: The response from the API


.. py:function:: get_org_id(endpoint, token=None)

   Get the ID of an organization

   :param endpoint: Name of the organization
   :type endpoint: string
   :param token: Github API token
   :type token: string
   :return: Organization github ID
   :rtype: string


.. py:function:: get_team_id(team, token, org=None)

   Get node ID of a team

   :param team: Name of the team (slug format, i.e. "Curation and recruitment" becomes "curation-and-recruitment")
   :type team: string
   :param token: Github API token
   :type token: string
   :param org: Github organization, defaults to `github_org` in `hosts.py`
   :type org: string
   :return: Node ID of the team
   :rtype: string


.. py:function:: get_repo(token, search, repo=None)

   Get the ID of a repository

   :param token: Github API token
   :type token: string
   :param search: Name of a project to search for an existing one
   :type search: string
   :param repo: Github repository (e.g. QualitativeDataRepository/dvcurator-python)
   :type repo: string
   :return: ID of the repository, or none if an existing project is detected
   :rtype: string


.. py:function:: alter_column(project_id, item_id, field_id, option_id, token)

   Put a created issue into a different column

   :param project_id: Project ID
   :type project_id: string
   :param item_id: Issue ID
   :type item_id: string
   :param field_id: ID of the columns option
   :type field_id: string
   :param option_id: ID of the option to change to (i.e. which column)
   :type option_id: string
   :param token: Github API token
   :type token: string
   :return: results of API query


.. py:function:: draft_issue(pid, template, token)

   Create a draft issue in a project based on a template

   :param pid: Github project ID
   :type pid: String
   :param template: Path to template txt file
   :type template: Path, as string
   :param token: Github API token
   :type token: string
   :return: ID of draft issue
   :rtype: string


.. py:function:: new_projectv2(dv, title, token)

   Create new github project (version 2)

   :param dv: Dataverse metadata block from `get_metadata()`
   :param title: Title of the project
   :type title: string
   :param token: Github API token
   :type token: string
   :return: ProjectV2 object from API


.. py:function:: generate_templatev2(dv, project_name, token)

   Create new github project and associated tickets for a project

   :param dv: Dataverse metadata block from `get_metadata()`
   :param project_name: Project name (used as prefix)
   :type project_name: string
   :param token: Github API token
   :type token: string


.. py:function:: add_issue(project_name, template, repo, pid, token)

   Create an issue and associate it with a project v2

   :param project_name: Prefix to attach to the ticket name
   :type project_name: string
   :param template: Path to the issue template that will be the body of the issue
   :type template: Path, as string
   :param repo: Github repository (e.g. QualitativeDataRepository/dvcurator-python)
   :type repo: string
   :param pid: Project ID
   :type pid: string
   :param token: Github API token
   :type token: string
   :return: ID of the newly created issue, or the API error
   :rtype: string or list[str]


