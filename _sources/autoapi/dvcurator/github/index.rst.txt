dvcurator.github
================

.. py:module:: dvcurator.github


Attributes
----------

.. autoapisummary::

   dvcurator.github.github_api


Functions
---------

.. autoapisummary::

   dvcurator.github.check_version
   dvcurator.github.check_repo
   dvcurator.github.search_existing
   dvcurator.github.create_project


Module Contents
---------------

.. py:data:: github_api
   :value: 'https://api.github.com'


.. py:function:: check_version()

   Check whether the running version is the same as the newest github tag

   :return: Whether a new update is available on github
   :rtype: boolean


.. py:function:: check_repo(key=None, repo=None)

   Check whether github repository exists

   :param key: Github API key, or None for public repository
   :type key: String or None
   :param repo: Github repository path (e.g. QualitativeDataRepository/dvcurator-python), or None for default
   :type repo: String or None
   :return: Whether or not the repository is accessible
   :rtype: boolean


.. py:function:: search_existing(project_name, token=None, repo=None)

   Check if a project has existing github tickets

   :param project_name: Project name to check for existing tickets
   :type project_name: String
   :param token: Github token key, or None for public repository
   :type token: String or None
   :param repo: Github repository path (e.g. QualitativeDataRepository/dvcurator-python), or None for default
   :type repo: String or None
   :return: Whether or not there are any existing tickets with the specified project name
   :rtype: boolean


.. py:function:: create_project(dv, project_name, token, repo=None)

   Trigger a "create a project" workflow in a GitHub repository.

   :param project_name: The name of the project to be created.
   :type project_name: str
   :param token: The GitHub API token for authentication.
   :type token: str
   :param repo: The repository where the project will be created. If not provided, the default repository will be used.
   :type repo: str, optional
   :return: A dictionary containing the response from the GitHub API.
   :rtype: dict
   :raises requests.exceptions.RequestException: If there is an error with the HTTP request.


